<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2010 (http://www.altova.com) by Ricardo Neto (Netpat) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<!-- Definição do tipo que extende um LONG -->
	<xs:complexType name="t_customLong">
		<xs:sequence>
			<xs:element name="totalDigits" type="xs:positiveInteger" minOccurs="0"/>
			<xs:element name="pattern" type="xs:string" minOccurs="0"/>
			<xs:element name="enumeration" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
			<xs:choice>
				<xs:element name="minInclusive" type="xs:long" minOccurs="0"/>
				<xs:element name="minExclusive" type="xs:long" minOccurs="0"/>
			</xs:choice>
			<xs:choice>
				<xs:element name="maxInclusive" type="xs:long" minOccurs="0"/>
				<xs:element name="maxExclusive" type="xs:long" minOccurs="0"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!-- Definição do tipo que extende um INT -->
	<xs:complexType name="t_customInt">
		<xs:sequence>
			<xs:element name="totalDigits" type="xs:positiveInteger" minOccurs="0"/>
			<xs:element name="pattern" type="xs:string" minOccurs="0"/>
			<xs:element name="enumeration" type="xs:int" minOccurs="0" maxOccurs="unbounded"/>
			<xs:choice>
				<xs:element name="minInclusive" type="xs:int" minOccurs="0"/>
				<xs:element name="minExclusive" type="xs:int" minOccurs="0"/>
			</xs:choice>
			<xs:choice>
				<xs:element name="maxInclusive" type="xs:int" minOccurs="0"/>
				<xs:element name="maxExclusive" type="xs:int" minOccurs="0"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!-- Definição do tipo que extende um SHORT -->
	<xs:complexType name="t_customShort">
		<xs:sequence>
			<xs:element name="totalDigits" type="xs:positiveInteger" minOccurs="0"/>
			<xs:element name="pattern" type="xs:string" minOccurs="0"/>
			<xs:element name="enumeration" type="xs:short" minOccurs="0" maxOccurs="unbounded"/>
			<xs:choice>
				<xs:element name="minInclusive" type="xs:short" minOccurs="0"/>
				<xs:element name="minExclusive" type="xs:short" minOccurs="0"/>
			</xs:choice>
			<xs:choice>
				<xs:element name="maxInclusive" type="xs:short" minOccurs="0"/>
				<xs:element name="maxExclusive" type="xs:short" minOccurs="0"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!-- Definição do tipo que extende um BYTE -->
	<xs:complexType name="t_customByte">
		<xs:sequence>
			<xs:element name="totalDigits" type="xs:positiveInteger" minOccurs="0"/>
			<xs:element name="pattern" type="xs:string" minOccurs="0"/>
			<xs:element name="enumeration" type="xs:byte" minOccurs="0" maxOccurs="unbounded"/>
			<xs:choice>
				<xs:element name="minInclusive" type="xs:byte" minOccurs="0"/>
				<xs:element name="minExclusive" type="xs:byte" minOccurs="0"/>
			</xs:choice>
			<xs:choice>
				<xs:element name="maxInclusive" type="xs:byte" minOccurs="0"/>
				<xs:element name="maxExclusive" type="xs:byte" minOccurs="0"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!-- Definição do tipo que extende um BINARY -->
	<xs:complexType name="t_customBinary">
		<xs:sequence>
			<xs:element name="length" type="xs:positiveInteger" minOccurs="0"/>
			<xs:element name="minLength" type="xs:positiveInteger" minOccurs="0"/>
			<xs:element name="maxLength" type="xs:positiveInteger" minOccurs="0"/>
			<xs:element name="pattern" type="xs:string" minOccurs="0"/>
			<xs:element name="enumeration" type="xs:long" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<!-- Definição do tipo que extende um DECIMAL -->
	<xs:complexType name="t_customDecimal">
		<xs:sequence>
			<xs:element name="totalDigits" type="xs:positiveInteger" minOccurs="0"/>
			<xs:element name="fractionDigits" type="xs:positiveInteger" minOccurs="0"/>
			<xs:element name="pattern" type="xs:string" minOccurs="0"/>
			<xs:element name="enumeration" type="xs:decimal" minOccurs="0" maxOccurs="unbounded"/>
			<xs:choice>
				<xs:element name="minInclusive" type="xs:decimal" minOccurs="0"/>
				<xs:element name="minExclusive" type="xs:decimal" minOccurs="0"/>
			</xs:choice>
			<xs:choice>
				<xs:element name="maxInclusive" type="xs:decimal" minOccurs="0"/>
				<xs:element name="maxExclusive" type="xs:decimal" minOccurs="0"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!-- Definição do tipo que extende um FLOAT -->
	<xs:complexType name="t_customFloat">
		<xs:sequence>
			<xs:element name="pattern" type="xs:string" minOccurs="0"/>
			<xs:element name="enumeration" type="xs:float" minOccurs="0" maxOccurs="unbounded"/>
			<xs:choice>
				<xs:element name="minInclusive" type="xs:float" minOccurs="0"/>
				<xs:element name="minExclusive" type="xs:float" minOccurs="0"/>
			</xs:choice>
			<xs:choice>
				<xs:element name="maxInclusive" type="xs:float" minOccurs="0"/>
				<xs:element name="maxExclusive" type="xs:float" minOccurs="0"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!-- Definição do tipo que extende um DOUBLE -->
	<xs:complexType name="t_customDouble">
		<xs:sequence>
			<xs:element name="pattern" type="xs:string" minOccurs="0"/>
			<xs:element name="enumeration" type="xs:double" minOccurs="0" maxOccurs="unbounded"/>
			<xs:choice>
				<xs:element name="minInclusive" type="xs:double" minOccurs="0"/>
				<xs:element name="minExclusive" type="xs:double" minOccurs="0"/>
			</xs:choice>
			<xs:choice>
				<xs:element name="maxInclusive" type="xs:double" minOccurs="0"/>
				<xs:element name="maxExclusive" type="xs:double" minOccurs="0"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!-- Definição do tipo que extende um STRING -->
	<xs:complexType name="t_customString">
		<xs:sequence>
			<xs:element name="length" type="xs:positiveInteger" minOccurs="0"/>
			<xs:element name="minLength" type="xs:positiveInteger" minOccurs="0"/>
			<xs:element name="maxLength" type="xs:positiveInteger" minOccurs="0"/>
			<xs:element name="pattern" type="xs:string" minOccurs="0"/>
			<xs:element name="enumeration" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<!-- Definição do tipo que extende um DATETIME -->
	<xs:complexType name="t_customDatetime">
		<xs:sequence>
			<xs:element name="pattern" type="xs:string" minOccurs="0"/>
			<xs:element name="enumeration" type="xs:dateTime" minOccurs="0" maxOccurs="unbounded"/>
			<xs:choice>
				<xs:element name="minInclusive" type="xs:dateTime" minOccurs="0"/>
				<xs:element name="minExclusive" type="xs:dateTime" minOccurs="0"/>
			</xs:choice>
			<xs:choice>
				<xs:element name="maxInclusive" type="xs:dateTime" minOccurs="0"/>
				<xs:element name="maxExclusive" type="xs:dateTime" minOccurs="0"/>
			</xs:choice>
		</xs:sequence>
	</xs:complexType>
	<!-- Definição de um tipo custom -->
	<xs:complexType name="t_customType">
		<xs:choice>
			<xs:element name="customLong" type="t_customLong"/>
			<xs:element name="customInt" type="t_customInt"/>
			<xs:element name="customShort" type="t_customShort"/>
			<xs:element name="customByte" type="t_customByte"/>
			<xs:element name="customBinary" type="t_customBinary"/>
			<xs:element name="customDecimal" type="t_customDecimal"/>
			<xs:element name="customFloat" type="t_customFloat"/>
			<xs:element name="customDouble" type="t_customDouble"/>
			<xs:element name="customString" type="t_customString"/>
			<xs:element name="customDatetime" type="t_customDatetime"/>
		</xs:choice>
		<xs:attribute name="name" type="xs:string" use="required"/>
	</xs:complexType>
	<!-- Definição do contentor de tipos custom -->
	<xs:complexType name="t_customTypeContainer">
		<xs:sequence>
			<xs:element name="customType" type="t_customType" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<!-- Definição de um tipo base -->
	<xs:complexType name="t_platformType">
		<xs:attribute name="name" type="xs:string" use="required"/>
		<xs:attribute name="precision" type="xs:int" use="required"/>
		<xs:attribute name="scale" type="xs:int" use="required"/>
		<xs:attribute name="maxLength" type="xs:int" use="required"/>
	</xs:complexType>
	<!-- Definição do contentor de tipos base -->
	<xs:complexType name="t_platformTypeContainer">
		<xs:sequence>
			<xs:element name="platformType" type="t_platformType" minOccurs="11" maxOccurs="11"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="types">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="platformTypes" type="t_platformTypeContainer">
					<xs:unique name="un_platformType_name">
						<xs:selector xpath="platformType"/>
						<xs:field xpath="@name"/>
					</xs:unique>
				</xs:element>
				<xs:element name="customTypes" type="t_customTypeContainer">
					<xs:unique name="un_customType_name">
						<xs:selector xpath="customType"/>
						<xs:field xpath="@name"/>
					</xs:unique>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>
